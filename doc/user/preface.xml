<!DOCTYPE chapter [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="preface">
<title>Preface</title>
<section xml:id="tarantool-overview">
  <title>Tarantool: an overview</title>
  <para>
    <productname>Tarantool</productname> is an in-memory NoSQL
    database. The code is available for free under the terms of
    <citetitle
    xlink:href="http://www.gnu.org/licenses/license-list.html#ModifiedBSD">BSD
    license</citetitle>. Supported platforms are GNU/Linux, Mac OS
    and FreeBSD.

  </para>

  <para>
    The server <emphasis role="strong">maintains all its data in
    random-access memory</emphasis>, and therefore has very low read
    latency. At the same time, a copy of the data
    is kept on non-volatile storage (a disk drive), and inserts
    and updates are performed atomically.
  </para>

  <para>
    To ensure atomicity, consistency and crash-safety of the
    persistent copy, a write-ahead log (WAL) is maintained, and
    each change is recorded in the WAL before it is considered
    complete. The logging subsystem supports group commit.
  </para>

  <para>
    If update and delete rate is high, a constantly growing
    write-ahead log file (or files) can pose a disk space problem,
    and significantly increase time necessary to restart from disk.
    A simple solution is employed: the server <emphasis
    role="strong">can be requested to save a concise
    snapshot</emphasis> of
    its current data. A combination of delayed garbage collection
    for data pages and <quote>copy-on-write</quote> technique for
    index pages is employed to provide the snapshot process
    with a consistent read view, so that the snapshot is taken
    in a quick, resource-savvy and non-blocking manner.
  </para>

  <para>
    <emphasis role="strong">Tarantool is lock-free</emphasis>.
    Instead of the operating system's concurrency primitives, such
    as threads and mutexes, Tarantool uses a cooperative
    multitasking environment to simultaneously operate on
    thousands of connections. A fixed number of independent
    execution threads within the server do not share state, but
    exchange data using low overhead message queues. While this
    approach limits server scalability to a few CPU cores,
    it removes competition for the memory bus and sets
    the scalability limit to the top of memory and network
    throughput.  CPU utilization of a typical highly-loaded
    Tarantool server is under 10%.
  </para>

  <para>
    Unlike most of NoSQL databases, Tarantool supports primary,
    <emphasis role="strong"> secondary keys, multi-part
    keys</emphasis>, HASH, TREE and BITSET index types.
  </para>

  <para>
    The key feature of Tarantool is <emphasis
    role="strong">support for Lua stored procedures</emphasis>, which
    can access and modify data atomically.
    Procedures can be created, modified and dropped at runtime.
  </para>
  <para>
    Use of Lua as an extension language does not end with stored 
    procedures: Lua programs can be used during startup, to define
    triggers and background tasks, interact with networked peers.
    Unlike popular application development frameworks based on
    "reactor" pattern, networking in server-side Lua is
    sequential, yet very efficient, as is built on top of the
    cooperating multitasking environment used by the server
    itself.
    </para>
    <para>
    Extended with Lua, Tarantool typically replaces
    not one but a few existing components with a single
    well-performing system, changing and simplifying complex
    multi-tier Web application architectures.
  </para>

  <para>
    Tarantool supports replication. Replicas may run locally or on
    a remote host. Tarantool replication is asynchronous and does
    not block writes to the master. When or if the master becomes
    unavailable, the replica can be switched to assume the role of
    the master without server restart.
  </para>

  <para>
    <emphasis role="strong">The software is production-ready</emphasis>.
    Tarantool has been created and is actively used at
    <citetitle xlink:href="http://api.mail.ru">Mail.Ru</citetitle>,
    one of the leading Russian web content providers. At Mail.Ru,
    the software serves the <quote>hottest</quote>
    data, such as online users and their sessions, online application
    properties, mapping between users and their serving shards,
    and so on.
   </para>
   <para>
   Outside Mail.Ru the software is used by a growing
    number of projects in online gaming, digital marketing, social
    media industries. While product development is sponsored by Mail.Ru, the
    roadmap, bugs database and the development process are fully
    open. The software incorporates patches from dozens of
    community contributors, and most of the programming language drivers
    are written and maintained by the community.
  </para>

</section>
<section xml:id="manual-conventions">
  <title>Conventions</title>
  <para>
    This manual is written in <citetitle
    xlink:href="http://www.docbook.org/tdg5/en/html/docbook.html">DocBook
    5</citetitle> XML markup language and is using the standard <citetitle
    xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/">DocBook
    XSL</citetitle> formatting conventions:</para>
  <para>
    UNIX shell command input is prefixed with '$ ' and is 
    formatted using a fixed-width font:
    <programlisting><prompt>$ </prompt>tarantool_box <option>--background</option>
    </programlisting>
  </para>
  <para>
    The same formatting style is used for file names:
    <filename>/path/to/var/dir</filename>.
  </para>

  <para>
    Text that represents user input is formatted in boldface:
    <programlisting>
      <prompt>$ </prompt><userinput>your input here</userinput>
    </programlisting>

  </para>

  <para>
    Within user input, replaceable items are printed in italics:
    <programlisting>
      <prompt>$ </prompt><userinput>tarantool_box <replaceable>--option</replaceable></userinput>
    </programlisting>

  </para>
</section>
<section xml:id="reporting-bugs">
  <title>Reporting bugs</title>
  <para>
    Please report bugs in Tarantool at <link
    xlink:href="http://bugs.launchpad.net/tarantool"/>. You can
    contact developers directly on
    <link xlink:href="irc://irc.freenode.net#tarantool">#tarantool</link>
    IRC channel or via a mailing list,
    <link xlink:href="https://launchpad.net/~tarantool-developers">tarantool-developers@lists.launchpad.net</link>.
  </para>
  <para>
    <emphasis role="strong">Caution:</emphasis> To prevent spam, Launchpad
    mailing list software silently drops all mail sent from
    non-registered email addresses. Launchpad registration also
    allows you to report bugs and create feature requests.
    You can always check whether or not your mail has been
    delivered to the mailing list in the public list archive, <link
    xlink:href="https://lists.launchpad.net/tarantool-developers"/>.
  </para>
</section>

</chapter>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en
-->
