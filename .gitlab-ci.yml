stages:
  - test
  - perf
  - cleanup

# 1. Git strategy disabled as shown at:
#    https://docs.gitlab.com/ee/ci/yaml/README.html#git-strategy
# 2. Git clean flags disabled as shown at:
#    https://docs.gitlab.com/ee/ci/yaml/README.html#git-clean-flags
variables:
  GITLAB_MAKE: "make -f .gitlab.mk"
  GIT_STRATEGY: none
  GIT_CLEAN_FLAGS: none
  OSX_VARDIR: /tmp/tnt

# 1. Git checkout strategy used from:
#    https://docs.gitlab.com/ee/ci/yaml/README.html#git-checkout
# 2. Submodule strategy used from:
#    https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
# List of steps:
# 1) Check/clone the Tarantool repository with submodules.
# 2) For shell based jobs change ownership of all the sources
#    to gitlab-runner user (NOTE: in Docker based jobs the
#    gitlab-runner user is not known).
# 3) Fetch Tarantool sources with branches and force checkout
#    of the testing commit.
# 4) Drop a tag that points to a current commit (if any) on a job triggered by
#    pushing to a branch (as against of pushing a tag). Otherwise we may get
#    two jobs for the same x.y.z-0-gxxxxxxxxx build: one is run by pushing a
#    branch and another by pushing a tag. The idea is to hide the new tag from
#    the branch job as if a tag would be pushed strictly after all branch jobs
#    for the same commit. See gh-3745.
# 5) Update submodules recursively (use force where supports).
# 6) Cleanup all the sources from all files except from repository.
before_script:
  - /bin/bash -c "pwd && ls -d .git || git clone --recurse-submodules ${CI_REPOSITORY_URL} ."
  - /bin/bash -c "! docker -v || (uid=`id -u` ; gid=`id -g` ; docker run -w /source -v ${PWD}:/source -i packpack/packpack:el-7 /bin/bash -c \"chown -R \$uid:\$gid * .[^.]*\")"
  - /bin/bash -c "git fetch -p && git checkout -f ${CI_COMMIT_SHORT_SHA}"
  - /bin/bash -c "[ -z \"${CI_COMMIT_TAG:-}\" ] && git tag -d \"$(git tag --points-at HEAD)\" 2>/dev/null || true"
  - /bin/bash -c "git submodule sync --recursive && git submodule update --force --init --recursive || git submodule update --recursive --init"
  - /bin/bash -c "git clean -ffdx && git submodule foreach git clean -ffdx && git submodule foreach git status"

# Jobs templates

.artifacts_files_template: &artifacts_files_definition
  artifacts:
    expire_in: 1000 yrs
    when: always
    paths:
      - "artifacts"
  after_script:
    - cp -r test/var/artifacts .

.perf_only_template: &perf_only_definition
  only:
    - "1.10"
    - tags
    - /^.*-perf$/
  except:
    - schedules
  variables: &perf_vars_definition
    IMAGE_PERF: "${CI_REGISTRY}/${CI_PROJECT_PATH}/perf/ubuntu-bionic:perf_master"
    IMAGE_PERF_BUILT: "${CI_REGISTRY}/${CI_PROJECT_PATH}/perf_tmp/ubuntu-bionic:perf_${CI_COMMIT_SHORT_SHA}"

.docker_test_template: &docker_test_definition
  <<: *artifacts_files_definition
  except:
    - /^.*-notest$/
  image: "${CI_REGISTRY}/${CI_PROJECT_PATH}/testing/debian-stretch:latest"
  stage: test
  tags:
    - docker_test

.osx_template: &osx_definition
  <<: *artifacts_files_definition
  except:
    - /^.*-notest$/
  stage: test
  script:
    - ${GITLAB_MAKE} test_osx
  after_script:
    # Artifacts can't be used from outside the project directory, check:
    #   https://docs.gitlab.com/ee/ci/yaml/README.html#artifactspaths
    # "Paths are relative to the project directory ($CI_PROJECT_DIR)"
    # "and canâ€™t directly link outside it."
    - cp -rf ${OSX_VARDIR}/artifacts .

.vbox_template: &vbox_definition
  <<: *artifacts_files_definition
  except:
    - /^.*-notest$/
  stage: test
  after_script:
    - >
      scp -r -P ${VMS_PORT} ${VMS_USER}@127.0.0.1:tarantool/test/var/artifacts . ;
      ${GITLAB_MAKE} vms_shutdown

.perf_docker_test_template: &perf_docker_test_definition
  <<: *perf_only_definition
  image: ${IMAGE_PERF_BUILT}
  stage: perf
  artifacts:
    when: always
    paths:
      - "*_result.txt"
      - "*_t_version.txt"
  script:
    - ${GITLAB_MAKE} perf_run

.perf_cleanup_definition: &perf_cleanup_definition
  <<: *perf_only_definition
  stage: cleanup
  script:
    - ${GITLAB_MAKE} perf_cleanup

# Tests


osx_14_release:
  tags:
    - osx_14
  <<: *osx_definition

osx_15_release_lto:
  tags:
    - osx_15
  variables:
    CMAKE_EXTRA_PARAMS: -DENABLE_LTO=ON
  <<: *osx_definition

freebsd_12_release:
  <<: *vbox_definition
  tags:
    - vms_freebsd_12
  variables:
    VMS_NAME: 'freebsd_12'
    VMS_USER: 'vagrant'
    VMS_PORT: '2232'
    MAKE: 'gmake'
  script:
    - ${GITLAB_MAKE} vms_start
    - ${GITLAB_MAKE} vms_test_freebsd_no_deps

# ####
# Perf
# ####

# Pre-testing part

perf_bootstrap:
  <<: *perf_only_definition
  stage: test
  tags:
    - deploy
  script:
    - ${GITLAB_MAKE} perf_prepare
  after_script:
    - ${GITLAB_MAKE} perf_cleanup_image

# Testing part

perf_ycsb_hash:
  <<: *perf_docker_test_definition
  tags:
    - docker_sh2_perf
  variables:
    <<: *perf_vars_definition
    BENCH: 'ycsb'
    ARG: 'hash'

perf_ycsb_tree:
  <<: *perf_docker_test_definition
  tags:
    - docker_sh2_perf
  variables:
    <<: *perf_vars_definition
    BENCH: 'ycsb'
    ARG: 'tree'

perf_nosqlbench_hash:
  <<: *perf_docker_test_definition
  tags:
    - docker_sh1_perf
  variables:
    <<: *perf_vars_definition
    BENCH: 'nosqlbench'
    ARG: 'hash'

perf_nosqlbench_tree:
  <<: *perf_docker_test_definition
  tags:
    - docker_sh1_perf
  variables:
    <<: *perf_vars_definition
    BENCH: 'nosqlbench'
    ARG: 'tree'

perf_cbench:
  <<: *perf_docker_test_definition
  tags:
    - docker_sh2_perf
  variables:
    <<: *perf_vars_definition
    BENCH: 'cbench'

perf_linkbench_ssd:
  <<: *perf_docker_test_definition
  tags:
    - docker_perf_ssd
  variables:
    <<: *perf_vars_definition
    BENCH: 'linkbench'

# Post-testing part

remove_images_sh1:
  <<: *perf_cleanup_definition
  tags:
    - sh1_shell

remove_images_sh2:
  <<: *perf_cleanup_definition
  tags:
    - sh2_shell

remove_images_sh3:
  <<: *perf_cleanup_definition
  tags:
    - sh3_shell

remove_images_sh9:
  <<: *perf_cleanup_definition
  tags:
    - sh9_shell

# Static builds

static_build:
  <<: *docker_test_definition
  script:
    - ${GITLAB_MAKE} test_static_build

static_docker_build:
  <<: *osx_definition
  tags:
    - deploy_test
  script:
    - ${GITLAB_MAKE} test_static_docker_build
