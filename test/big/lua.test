# encoding: tarantool
#
import os
import shutil

exec sql "insert into t1 values ('brave', 'new', 'world')"
exec admin "lua box.space[1].index[1]:min()"
exec admin "lua box.space[1].index[1]:max()"
exec sql "call box.select(1, 1, 'new', 'world')"
print """#
# A test case for Bug #904208
# "assert failed, when key cardinality is greater than index cardinality"
# https://bugs.launchpad.net/tarantool/+bug/904208
#"""
exec sql "call box.select(1, 1, 'new', 'world', 'order')"
exec sql "call box.delete(1, 'brave')"

print """#
# A test case for Bug #902091
# "Positioned iteration over a multipart index doesn't work"
# https://bugs.launchpad.net/tarantool/+bug/902091
#"""
exec sql "insert into t1 values ('item 1', 'alabama', 'song')"
exec sql "insert into t1 values ('item 2', 'california', 'dreaming ')"
exec sql "insert into t1 values ('item 3', 'california', 'uber alles')"
exec sql "insert into t1 values ('item 4', 'georgia', 'on my mind')"
exec admin "lua iter, tuple = box.space[1].index[1]:next('california')"
exec admin "lua tuple"
exec admin "lua iter, tuple = box.space[1].index[1]:next(iter)"
exec admin "lua tuple"
exec sql "call box.delete(1, 'item 1')"
exec sql "call box.delete(1, 'item 2')"
exec sql "call box.delete(1, 'item 3')"
exec sql "call box.delete(1, 'item 4')"

#
# Check range scan over multipart keys
#
exec sql "insert into t5 values ('01234567', 'new', 'world')"
exec sql "insert into t5 values ('00000000', 'of', 'puppets')"
exec sql "insert into t5 values ('00000001', 'of', 'might', 'and', 'magic')"
exec sql "call box.select_range(5, 1, 2, 'of')"
exec sql "call box.select_reverse_range(5, 1, 2, 'of')"
exec admin "lua box.space[5]:truncate()"

#
# Lua 64bit numbers support
#
exec admin "lua box.insert('8', tonumber64('18446744073709551615'), 'magic')"
exec admin "lua tu = box.select('8', '0', tonumber64('18446744073709551615'))"
exec admin "lua num = box.unpack('l', tu[0])"
exec admin "lua print(num)"
exec admin "lua type(num) == 'cdata'"
exec admin "lua num == tonumber64('18446744073709551615')"
exec admin "lua num,num1,num2 = box.unpack('lll', tu[0], tu[0], tu[0])"
exec admin "lua num == tonumber64('18446744073709551615')"
exec admin "lua num1 == tonumber64('18446744073709551615')"
exec admin "lua num2 == tonumber64('18446744073709551615')"
exec admin "lua box.space[8]:truncate()"

#
# Lua select_reverse_range
#
exec admin "lua box.insert(14, 0, 0)"
exec admin "lua box.insert(14, 1, 0)"
exec admin "lua box.insert(14, 2, 0)"
exec admin "lua box.insert(14, 3, 0)"
exec admin "lua box.insert(14, 4, 0)"
exec admin "lua box.insert(14, 5, 0)"
exec admin "lua box.insert(14, 6, 0)"
exec admin "lua box.insert(14, 7, 0)"
exec admin "lua box.insert(14, 8, 0)"
exec admin "lua box.insert(14, 9, 0)"
exec admin "lua box.select_range(14, 1, 10)"
exec admin "lua box.select_reverse_range(14, 1, 10)"
exec admin "lua box.select_reverse_range(14, 1, 4)"
exec admin "lua box.space[14]:truncate()"

print """
#
# Tests for box.index iterators
#
"""
pid = 1
tid = 999
for sid in {1, 2}:
    for i in range(1, 4):
        exec admin "lua box.insert(16, 'pid_%d', 'sid_%d', 'tid_%d')" % (pid, sid, tid)
        pid += 1
        tid -= 1

exec admin "lua for k, v in box.space[16].index[1].next, box.space[16].index[1], 'sid_1' do print(v) end"
exec admin "lua for k, v in box.space[16].index[1].prev, box.space[16].index[1], 'sid_2' do print(v) end"
exec admin "lua for k, v in box.space[16].index[1].next_equal, box.space[16].index[1], 'sid_1' do print(v) end"
exec admin "lua for k, v in box.space[16].index[1].next_equal, box.space[16].index[1], 'sid_2' do print(v) end"
exec admin "lua box.space[16]:truncate()"

#
# Tests for lua idx:count()
#
exec admin "lua box.insert(17, 1, 1, 1)"
exec admin "lua box.insert(17, 2, 2, 0)"
exec admin "lua box.insert(17, 3, 2, 1)"
exec admin "lua box.insert(17, 4, 3, 0)"
exec admin "lua box.insert(17, 5, 3, 1)"
exec admin "lua box.insert(17, 6, 3, 2)"
exec admin "lua box.space[17].index[1]:count(1)"
exec admin "lua box.space[17].index[1]:count(2)"
exec admin "lua box.space[17].index[1]:count(2, 1)"
exec admin "lua box.space[17].index[1]:count(2, 2)"
exec admin "lua box.space[17].index[1]:count(3)"
exec admin "lua box.space[17].index[1]:count(3, 3)"
exec admin "lua box.space[17].index[1]:count()"
exec admin "lua box.space[17]:truncate()"

#
# Tests for lua box.auto_increment
#
exec admin "lua box.space[18]:truncate()"
exec admin "lua box.auto_increment(18, 'a')"
exec admin "lua box.insert(18, 5)"
exec admin "lua box.auto_increment(18, 'b')"
exec admin "lua box.auto_increment(18, 'c')"
exec admin "lua box.space[18]:truncate()"

#
# Tests for lua tuple:transform()
#
exec admin "lua t=box.insert(12, '1', '2', '3', '4', '5', '6', '7')"
exec admin "lua t:transform(7, 0, '8', '9', '100')"
exec admin "lua t:transform(0, 1)"
exec admin "lua t:transform(1, 4)"
exec admin "lua t:transform(-1, 1)"
exec admin "lua t:transform(-3, 2)"
exec admin "lua t:transform(0, 0, 'A')"
exec admin "lua t:transform(-1, 0, 'A')"
exec admin "lua t:transform(0, 1, 'A')"
exec admin "lua t:transform(-1, 1, 'B')"
exec admin "lua t:transform(0, 2, 'C')"
exec admin "lua t:transform(2, 0, 'hello')"
exec admin "lua t:transform(0, -1, 'C')"
exec admin "lua t:transform(0, 100)"
exec admin "lua t:transform(-100, 1)"
exec admin "lua t:transform(0, 3, 1, 2, 3)"
exec admin "lua t:transform(3, 1, tonumber64(4))"
exec admin "lua t:transform(0, 1, {})"

#
# Tests for lua tuple:find() and tuple:findall()
#
exec admin "lua t=box.insert(12, 'A', '2', '3', '4', '3', '2', '5', '6', '3', '7')"
exec admin "lua t:find('2')"
exec admin "lua t:find('4')"
exec admin "lua t:find('5')"
exec admin "lua t:find('A')"
exec admin "lua t:find('0')"

exec admin "lua t:findall('A')"
exec admin "lua t:findall('2')"
exec admin "lua t:findall('3')"
exec admin "lua t:findall('0')"

exec admin "lua t:find(2, '2')"
exec admin "lua t:find(89, '2')"
exec admin "lua t:findall(4, '3')"

exec admin "lua t=box.insert(12, 'Z', '2', 2, 3, tonumber64(2))"
exec admin "lua t:find(2)"
exec admin "lua t:find(tonumber64(2))"
exec admin "lua t:find('2')"
exec admin "lua box.space[12]:truncate()"

print """#
# A test case for Bug #1038784
# transform returns wrong tuple and put broken reply into socket
# https://bugs.launchpad.net/tarantool/+bug/1038784
#"""

push_lua_path = os.path.join(vardir, "push.lua")
shutil.copy("big/push.lua", push_lua_path)

exec admin "lua dofile('push.lua')"
shutil.rmtree(push_lua_path, True)

exec admin "lua push_collection(0, 1038784, 'hello')"
exec admin "lua push_collection(0, 1038784, 'hello')"
exec admin "lua push_collection(0, 1038784, 'hello')"

exec admin "lua push_collection(1, 1038784, 'hi')"
exec admin "lua push_collection(2, 1038784, 'hi')"
exec admin "lua push_collection(2, 1038784, 'hi')"

exec admin "lua push_collection(5, 1038784, 'hey')"
exec admin "lua push_collection(5, 1038784, 'hey')"
exec admin "lua push_collection(5, 1038784, 'hey')"
exec admin "lua push_collection(5, 1038784, 'hey')"

print """# A test case for Bug#1060967: truncation of 64-bit numbers"""
exec admin "lua box.space[5]:insert(2^51, 'hello', 'world')"
exec admin "lua box.space[5]:select(0, 2^51)"
exec admin "lua box.space[5]:truncate()"
print """# Test that we print index number in error ER_INDEX_VIOLATION"""
exec admin "lua box.space[1]:insert(1, 'hello', 'world')"
exec admin "lua box.space[1]:insert(2, 'hello', 'world')"
exec admin "lua box.space[1]:truncate()"
