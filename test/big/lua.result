insert into t1 values ('brave', 'new', 'world')
Insert OK, 1 row affected
lua box.space[1].index[1]:min()
---
 - 'brave': {'new', 'world'}
...
lua box.space[1].index[1]:max()
---
 - 'brave': {'new', 'world'}
...
call box.select(1, 1, 'new', 'world')
Found 1 tuple:
['brave', 'new', 'world']
#
# A test case for Bug #904208
# "assert failed, when key cardinality is greater than index cardinality"
# https://bugs.launchpad.net/tarantool/+bug/904208
#
call box.select(1, 1, 'new', 'world', 'order')
An error occurred: ER_KEY_PART_COUNT, 'Key part count 3 is greater than index part count 2'
call box.delete(1, 'brave')
Found 1 tuple:
['brave', 'new', 'world']
#
# A test case for Bug #902091
# "Positioned iteration over a multipart index doesn't work"
# https://bugs.launchpad.net/tarantool/+bug/902091
#
insert into t1 values ('item 1', 'alabama', 'song')
Insert OK, 1 row affected
insert into t1 values ('item 2', 'california', 'dreaming ')
Insert OK, 1 row affected
insert into t1 values ('item 3', 'california', 'uber alles')
Insert OK, 1 row affected
insert into t1 values ('item 4', 'georgia', 'on my mind')
Insert OK, 1 row affected
lua iter, tuple = box.space[1].index[1]:next('california')
---
...
lua tuple
---
 - 'item 2': {'california', 'dreaming '}
...
lua iter, tuple = box.space[1].index[1]:next(iter)
---
...
lua tuple
---
 - 'item 3': {'california', 'uber alles'}
...
call box.delete(1, 'item 1')
Found 1 tuple:
['item 1', 'alabama', 1735290739]
call box.delete(1, 'item 2')
Found 1 tuple:
['item 2', 'california', 'dreaming ']
call box.delete(1, 'item 3')
Found 1 tuple:
['item 3', 'california', 'uber alles']
call box.delete(1, 'item 4')
Found 1 tuple:
['item 4', 'georgia', 'on my mind']
insert into t5 values ('01234567', 'new', 'world')
Insert OK, 1 row affected
insert into t5 values ('00000000', 'of', 'puppets')
Insert OK, 1 row affected
insert into t5 values ('00000001', 'of', 'might', 'and', 'magic')
Insert OK, 1 row affected
call box.select_range(5, 1, 2, 'of')
Found 2 tuples:
['00000001', 'of', 'might', 'and', 'magic']
['00000000', 'of', 'puppets']
call box.select_reverse_range(5, 1, 2, 'of')
Found 2 tuples:
['00000000', 'of', 'puppets']
['00000001', 'of', 'might', 'and', 'magic']
lua box.space[5]:truncate()
---
...
lua box.insert('8', tonumber64('18446744073709551615'), 'magic')
---
 - 18446744073709551615: {'magic'}
...
lua tu = box.select('8', '0', tonumber64('18446744073709551615'))
---
...
lua num = box.unpack('l', tu[0])
---
...
lua print(num)
---
18446744073709551615
...
lua type(num) == 'cdata'
---
 - true
...
lua num == tonumber64('18446744073709551615')
---
 - true
...
lua num,num1,num2 = box.unpack('lll', tu[0], tu[0], tu[0])
---
...
lua num == tonumber64('18446744073709551615')
---
 - true
...
lua num1 == tonumber64('18446744073709551615')
---
 - true
...
lua num2 == tonumber64('18446744073709551615')
---
 - true
...
lua box.space[8]:truncate()
---
...
lua box.insert(14, 0, 0)
---
 - 0: {0}
...
lua box.insert(14, 1, 0)
---
 - 1: {0}
...
lua box.insert(14, 2, 0)
---
 - 2: {0}
...
lua box.insert(14, 3, 0)
---
 - 3: {0}
...
lua box.insert(14, 4, 0)
---
 - 4: {0}
...
lua box.insert(14, 5, 0)
---
 - 5: {0}
...
lua box.insert(14, 6, 0)
---
 - 6: {0}
...
lua box.insert(14, 7, 0)
---
 - 7: {0}
...
lua box.insert(14, 8, 0)
---
 - 8: {0}
...
lua box.insert(14, 9, 0)
---
 - 9: {0}
...
lua box.select_range(14, 1, 10)
---
 - 0: {0}
 - 1: {0}
 - 2: {0}
 - 3: {0}
 - 4: {0}
 - 5: {0}
 - 6: {0}
 - 7: {0}
 - 8: {0}
 - 9: {0}
...
lua box.select_reverse_range(14, 1, 10)
---
 - 9: {0}
 - 8: {0}
 - 7: {0}
 - 6: {0}
 - 5: {0}
 - 4: {0}
 - 3: {0}
 - 2: {0}
 - 1: {0}
 - 0: {0}
...
lua box.select_reverse_range(14, 1, 4)
---
 - 9: {0}
 - 8: {0}
 - 7: {0}
 - 6: {0}
...
lua box.space[14]:truncate()
---
...

#
# Tests for box.index iterators (deprecated)
#


lua box.insert(16, 'pid_1', 'sid_1', 'tid_999')
---
 - 'pid_1': {'sid_1', 'tid_999'}
...
lua box.insert(16, 'pid_2', 'sid_1', 'tid_998')
---
 - 'pid_2': {'sid_1', 'tid_998'}
...
lua box.insert(16, 'pid_3', 'sid_1', 'tid_997')
---
 - 'pid_3': {'sid_1', 'tid_997'}
...
lua box.insert(16, 'pid_4', 'sid_2', 'tid_996')
---
 - 'pid_4': {'sid_2', 'tid_996'}
...
lua box.insert(16, 'pid_5', 'sid_2', 'tid_995')
---
 - 'pid_5': {'sid_2', 'tid_995'}
...
lua box.insert(16, 'pid_6', 'sid_2', 'tid_994')
---
 - 'pid_6': {'sid_2', 'tid_994'}
...
lua for k, v in box.space[16].index[1].next, box.space[16].index[1], 'sid_1' do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for k, v in box.space[16].index[1].prev, box.space[16].index[1], 'sid_2' do print(v) end
---
'pid_4': {'sid_2', 'tid_996'}
'pid_5': {'sid_2', 'tid_995'}
'pid_6': {'sid_2', 'tid_994'}
'pid_1': {'sid_1', 'tid_999'}
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua for k, v in box.space[16].index[1].next_equal, box.space[16].index[1], 'sid_1' do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
...
lua for k, v in box.space[16].index[1].next_equal, box.space[16].index[1], 'sid_2' do print(v) end
---
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua box.space[16]:truncate()
---
...
lua box.insert(16, 'pid_1', 'sid_1', 'tid_999')
---
 - 'pid_1': {'sid_1', 'tid_999'}
...
lua box.insert(16, 'pid_2', 'sid_1', 'tid_998')
---
 - 'pid_2': {'sid_1', 'tid_998'}
...
lua box.insert(16, 'pid_3', 'sid_1', 'tid_997')
---
 - 'pid_3': {'sid_1', 'tid_997'}
...
lua box.insert(16, 'pid_4', 'sid_2', 'tid_996')
---
 - 'pid_4': {'sid_2', 'tid_996'}
...
lua box.insert(16, 'pid_5', 'sid_2', 'tid_995')
---
 - 'pid_5': {'sid_2', 'tid_995'}
...
lua box.insert(16, 'pid_6', 'sid_2', 'tid_994')
---
 - 'pid_6': {'sid_2', 'tid_994'}
...
lua for v in box.space[16].index[1]:iterator(box.index.ALL) do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.GE, nil) do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.GT, nil) do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.LE, nil) do print(v) end
---
'pid_4': {'sid_2', 'tid_996'}
'pid_5': {'sid_2', 'tid_995'}
'pid_6': {'sid_2', 'tid_994'}
'pid_1': {'sid_1', 'tid_999'}
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua for v in box.space[16].index[1]:iterator(box.index.LT, nil) do print(v) end
---
'pid_4': {'sid_2', 'tid_996'}
'pid_5': {'sid_2', 'tid_995'}
'pid_6': {'sid_2', 'tid_994'}
'pid_1': {'sid_1', 'tid_999'}
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua for v in box.space[16].index[1]:iterator(box.index.EQ, 'sid_1') do print(v) end
---
'pid_3': {'sid_1', 'tid_997'}
'pid_2': {'sid_1', 'tid_998'}
'pid_1': {'sid_1', 'tid_999'}
...
lua for v in box.space[16].index[1]:iterator(box.index.REQ, 'sid_1') do print(v) end
---
'pid_1': {'sid_1', 'tid_999'}
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua for v in box.space[16].index[1]:iterator(box.index.EQ, 'sid_2', 'tid_996') do print(v) end
---
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.GE, 'sid_2', 'tid_994') do print(v) end
---
'pid_6': {'sid_2', 'tid_994'}
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.GT, 'sid_2', 'tid_994') do print(v) end
---
'pid_5': {'sid_2', 'tid_995'}
'pid_4': {'sid_2', 'tid_996'}
...
lua for v in box.space[16].index[1]:iterator(box.index.LE, 'sid_1', 'tid_999') do print(v) end
---
'pid_1': {'sid_1', 'tid_999'}
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua for v in box.space[16].index[1]:iterator(box.index.LT, 'sid_1', 'tid_999') do print(v) end
---
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
...
lua iter = box.space[16].index[1]:iterator(box.index.EQ, 'sid_2', 'tid_994'); print(iter())
---
'pid_6': {'sid_2', 'tid_994'}
...
lua box.space[16].index[1]:iterator(box.index.EQ, 'sid_2', 'tid_992', '1')
---
error: 'Key part count 3 is greater than index part count 2'
...
lua for v in box.space[16].index[0]:iterator(box.index.EQ, 'pid_2') do print(v) end
---
'pid_2': {'sid_1', 'tid_998'}
...
lua for v in box.space[16].index[0]:iterator(box.index.ALL) do print(v) end
---
'pid_2': {'sid_1', 'tid_998'}
'pid_3': {'sid_1', 'tid_997'}
'pid_1': {'sid_1', 'tid_999'}
'pid_6': {'sid_2', 'tid_994'}
'pid_4': {'sid_2', 'tid_996'}
'pid_5': {'sid_2', 'tid_995'}
...
lua box.space[16]:truncate()
---
...
lua box.insert(17, 1, 1, 1)
---
 - 1: {1, 1}
...
lua box.insert(17, 2, 2, 0)
---
 - 2: {2, 0}
...
lua box.insert(17, 3, 2, 1)
---
 - 3: {2, 1}
...
lua box.insert(17, 4, 3, 0)
---
 - 4: {3, 0}
...
lua box.insert(17, 5, 3, 1)
---
 - 5: {3, 1}
...
lua box.insert(17, 6, 3, 2)
---
 - 6: {3, 2}
...
lua box.space[17].index[1]:count(1)
---
 - 1
...
lua box.space[17].index[1]:count(2)
---
 - 2
...
lua box.space[17].index[1]:count(2, 1)
---
 - 1
...
lua box.space[17].index[1]:count(2, 2)
---
 - 0
...
lua box.space[17].index[1]:count(3)
---
 - 3
...
lua box.space[17].index[1]:count(3, 3)
---
 - 0
...
lua box.space[17].index[1]:count()
---
error: 'index.count(): one or more arguments expected'
...
lua box.space[17]:truncate()
---
...
lua box.space[18]:truncate()
---
...
lua box.auto_increment(18, 'a')
---
 - 0: {'a'}
...
lua box.insert(18, 5)
---
 - 5: {}
...
lua box.auto_increment(18, 'b')
---
 - 6: {'b'}
...
lua box.auto_increment(18, 'c')
---
 - 7: {'c'}
...
lua box.space[18]:truncate()
---
...
lua t=box.insert(12, '1', '2', '3', '4', '5', '6', '7')
---
...
lua t:transform(7, 0, '8', '9', '100')
---
 - '1': {'2', '3', '4', '5', '6', '7', '8', '9', '100'}
...
lua t:transform(0, 1)
---
 - '2': {'3', '4', '5', '6', '7'}
...
lua t:transform(1, 4)
---
 - '1': {'6', '7'}
...
lua t:transform(-1, 1)
---
 - '1': {'2', '3', '4', '5', '6'}
...
lua t:transform(-3, 2)
---
 - '1': {'2', '3', '4', '7'}
...
lua t:transform(0, 0, 'A')
---
 - 'A': {'1', '2', '3', '4', '5', '6', '7'}
...
lua t:transform(-1, 0, 'A')
---
 - '1': {'2', '3', '4', '5', '6', 'A', '7'}
...
lua t:transform(0, 1, 'A')
---
 - 'A': {'2', '3', '4', '5', '6', '7'}
...
lua t:transform(-1, 1, 'B')
---
 - '1': {'2', '3', '4', '5', '6', 'B'}
...
lua t:transform(0, 2, 'C')
---
 - 'C': {'3', '4', '5', '6', '7'}
...
lua t:transform(2, 0, 'hello')
---
 - '1': {'2', 'hello', '3', '4', '5', '6', '7'}
...
lua t:transform(0, -1, 'C')
---
error: 'tuple.transform(): len is negative'
...
lua t:transform(0, 100)
---
 - '': {}
...
lua t:transform(-100, 1)
---
error: 'tuple.transform(): offset is out of bound'
...
lua t:transform(0, 3, 1, 2, 3)
---
 - 1: {2, 3, '4', '5', '6', '7'}
...
lua t:transform(3, 1, tonumber64(4))
---
 - '1': {'2', '3', 4, '5', '6', '7'}
...
lua t:transform(0, 1, {})
---
error: 'tuple.transform(): unsupported field type ''table'''
...
lua t=box.insert(12, 'A', '2', '3', '4', '3', '2', '5', '6', '3', '7')
---
...
lua t:find('2')
---
 - 1
...
lua t:find('4')
---
 - 3
...
lua t:find('5')
---
 - 6
...
lua t:find('A')
---
 - 0
...
lua t:find('0')
---
...
lua t:findall('A')
---
 - 0
...
lua t:findall('2')
---
 - 1
 - 5
...
lua t:findall('3')
---
 - 2
 - 4
 - 8
...
lua t:findall('0')
---
...
lua t:find(2, '2')
---
 - 5
...
lua t:find(89, '2')
---
...
lua t:findall(4, '3')
---
 - 4
 - 8
...
lua t=box.insert(12, 'Z', '2', 2, 3, tonumber64(2))
---
...
lua t:find(2)
---
 - 2
...
lua t:find(tonumber64(2))
---
 - 4
...
lua t:find('2')
---
 - 1
...
lua box.space[12]:truncate()
---
...
#
# A test case for Bug #1038784
# transform returns wrong tuple and put broken reply into socket
# https://bugs.launchpad.net/tarantool/+bug/1038784
#
lua dofile('push.lua')
---
...
lua push_collection(0, 1038784, 'hello')
---
 - 1038784: {'hello'}
...
lua push_collection(0, 1038784, 'hello')
---
 - 1038784: {}
...
lua push_collection(0, 1038784, 'hello')
---
 - 1038784: {}
...
lua push_collection(1, 1038784, 'hi')
---
 - 1038784: {26984}
...
lua push_collection(2, 1038784, 'hi')
---
 - 1038784: {26984, 26984}
...
lua push_collection(2, 1038784, 'hi')
---
 - 1038784: {26984, 26984}
...
lua push_collection(5, 1038784, 'hey')
---
 - 1038784: {26984, 26984, 'hey'}
...
lua push_collection(5, 1038784, 'hey')
---
 - 1038784: {26984, 26984, 'hey', 'hey'}
...
lua push_collection(5, 1038784, 'hey')
---
 - 1038784: {26984, 26984, 'hey', 'hey', 'hey'}
...
lua push_collection(5, 1038784, 'hey')
---
 - 1038784: {26984, 'hey', 'hey', 'hey', 'hey'}
...
# A test case for Bug#1060967: truncation of 64-bit numbers
lua box.space[5]:insert(2^51, 'hello', 'world')
---
 - 2251799813685248: {'hello', 'world'}
...
lua box.space[5]:select(0, 2^51)
---
 - 2251799813685248: {'hello', 'world'}
...
lua box.space[5]:truncate()
---
...
# Test that we print index number in error ER_INDEX_VIOLATION
lua box.space[1]:insert(1, 'hello', 'world')
---
 - 1: {'hello', 'world'}
...
lua box.space[1]:insert(2, 'hello', 'world')
---
error: 'Duplicate key exists in unique index 1'
...
lua box.space[1]:truncate()
---
...
