test_run = require('test_run').new()
---
...
net = require('net.box')
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua...\"]:<line>: '")
---
- true
...
_ = box.schema.space.create('test')
---
...
_ = box.space.test:create_index('primary', {type = 'TREE', parts = {1,'unsigned'}})
---
...
_ = box.space.test:create_index('covering', {type = 'TREE', parts = {1,'unsigned',3,'string',2,'unsigned'}})
---
...
_ = box.space.test:insert{1, 2, "string"}
---
...
box.schema.user.grant('guest', 'read,write', 'space', 'test')
---
...
c = net:connect(box.cfg.listen)
---
...
-- gh-1729 net.box index metadata incompatible with local metadata
c.space.test.index.primary.parts
---
- - fieldno: 1
    type: unsigned
    exclude_null: false
    is_nullable: false
...
c.space.test.index.covering.parts
---
- - fieldno: 1
    type: unsigned
    exclude_null: false
    is_nullable: false
  - fieldno: 3
    type: string
    exclude_null: false
    is_nullable: false
  - fieldno: 2
    type: unsigned
    exclude_null: false
    is_nullable: false
...
box.space.test:drop()
---
...
-- CALL vs CALL_16 in connect options
function echo(...) return ... end
---
...
box.schema.user.grant('guest', 'execute', 'universe')
---
...
c = net.connect(box.cfg.listen)
---
...
c:call('echo', {42})
---
- 42
...
c:eval('return echo(...)', {42})
---
- 42
...
-- invalid arguments
c:call('echo', 42)
---
- error: 'builtin/box/net_box.lua..."]:<line>: Use remote:call(func_name, {arg1, arg2, ...},
    opts) instead of remote:call(func_name, arg1, arg2, ...)'
...
c:eval('return echo(...)', 42)
---
- error: 'builtin/box/net_box.lua..."]:<line>: Use remote:eval(expression, {arg1, arg2, ...},
    opts) instead of remote:eval(expression, arg1, arg2, ...)'
...
c:close()
---
...
c = net.connect(box.cfg.listen, {call_16 = true})
---
...
c:call('echo', 42)
---
- - [42]
...
c:eval('return echo(...)', 42)
---
- 42
...
c:close()
---
...
box.schema.user.revoke('guest', 'execute', 'universe')
---
...
