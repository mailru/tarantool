s = box.socket.udp()
---
...
type(s)
---
- userdata
...
s:close()
---
...
s = box.socket.tcp()
---
...
type(s)
---
- userdata
...
s:close()
---
...
s:close()
---
...
s:error()
---
- 0
- Success
...
s:connect('localhost', '30303')
---
- null
- error
- 111
- Connection refused
...
s:error()
---
- 111
- Connection refused
...
s:connect('127.0.0.1', '30303')
---
- null
- error
- 111
- Connection refused
...
s:error()
---
- 111
- Connection refused
...
s:connect('127.0.0.1', '30303', 0.01)
---
- null
- error
- 111
- Connection refused
...
s:error()
---
- 111
- Connection refused
...
s:connect('127.0.0.1')
---
- error: 'bad argument #3 to ''?'' (string expected, got no value)'
...
s:connect()
---
- error: 'bad argument #2 to ''?'' (string expected, got no value)'
...
s:connect(123)
---
- error: 'bad argument #3 to ''?'' (string expected, got no value)'
...
s:close()
---
...
s:close()
---
...
sr, se = s:connect('somewhereelse', '30303', 0.0001)
---
...
sr == nil and se == 'error' or se == 'timeout'
---
- true
...
e = s:error()
---
...
e == -1 or e == 110
---
- true
...
s:close()
---
...
s:send()
---
- error: 'box.socket: socket is not initialized'
...
s:send(1)
---
- error: 'box.socket: socket is not initialized'
...
s = box.socket.tcp()
---
...
type(s:connect('127.0.0.1', '30303'))
---
- userdata
...
s:send('ping')
---
- 4
...
s:error()
---
- 0
- Success
...
n, status, error_code, error_str = s:send(string.rep('=', 8388608), 0.0000001)
---
...
type(n)
---
- number
...
type(status)
---
- string
...
type(error_code)
---
- number
...
type(error_str)
---
- string
...
status
---
- timeout
...
error_code
---
- 110
...
error_str
---
- Connection timed out
...
s:error()
---
- 110
- Connection timed out
...
connected
s:send('ping')
---
- 0
- error
- 104
- Connection reset by peer
...
s:error()
---
- 104
- Connection reset by peer
...
s:close()
---
...
s:recv()
---
- error: 'box.socket: socket is not initialized'
...
type(s:connect('127.0.0.1', '30308'))
---
- userdata
...
s:error()
---
- 0
- Success
...
12
s:recv(12)
---
- Hello, World
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30308'))
---
- userdata
...
s:error()
---
- 0
- Success
...
21
s:recv(11)
---
- Hello World
...
s:recv(5)
---
- ' Over'
...
s:recv(5)
---
- sized
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30308'))
---
- userdata
...
s:error()
---
- 0
- Success
...
connected
3
s:recv(4, 0.01)
---
- 
- timeout
- 110
- Connection timed out
...
s:error()
---
- 110
- Connection timed out
...
s:recv(4)
---
- ping
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30309'))
---
- userdata
...
s:error()
---
- 0
- Success
...
connected
4
s:recv(6)
---
- ping
- eof
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30311'))
---
- userdata
...
s:error()
---
- 0
- Success
...
connected
24
s:recv(5)
---
- 'ping '
...
s:recv(5)
---
- 'ping '
...
s:recv(5)
---
- 'ping '
...
s:recv(5)
---
- 'ping '
...
s:recv(5)
---
- 'end '
- eof
...
s:recv(5)
---
- 
- eof
...
s:recv(5)
---
- 
- eof
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30305'))
---
- userdata
...
s:error()
---
- 0
- Success
...
12
s:readline()
---
- 'Hello World

'
- null
- '

'
...
s:error()
---
- 0
- Success
...
12
s:readline(5)
---
- Hello
- limit
...
s:error()
---
- 0
- Success
...
s:readline(5, 0.01)
---
- ' Worl'
- limit
...
s:error()
---
- 0
- Success
...
s:readline(6, 0.01)
---
- 'd

'
- null
- '

'
...
s:error()
---
- 0
- Success
...
9
s:readline({'i', 'D'})
---
- AbcD
- null
- D
...
s:error()
---
- 0
- Success
...
s:readline({'i', 'G'})
---
- efG
- null
- G
...
s:error()
---
- 0
- Success
...
s:readline({'i'})
---
- hi
- null
- i
...
s:error()
---
- 0
- Success
...
13
s:readline({'Cat', 'Cow', 'Dog', 'Star'})
---
- Cat
- null
- Cat
...
s:error()
---
- 0
- Success
...
s:readline({'Cat', 'Cow', 'Dog', 'Star'})
---
- Cow
- null
- Cow
...
s:error()
---
- 0
- Success
...
s:readline({'Cat', 'Cow', 'Dog', 'Star'})
---
- Dog
- null
- Dog
...
s:error()
---
- 0
- Success
...
s:readline({'Cat', 'Cow', 'Dog', 'Star'})
---
- Star
- null
- Star
...
s:error()
---
- 0
- Success
...
15
s:readline(3, {'Cat', 'Coow'})
---
- Cat
- null
- Cat
...
s:error()
---
- 0
- Success
...
s:readline(3, {'Cat', 'Coow'})
---
- Coo
- limit
...
s:error()
---
- 0
- Success
...
s:readline(3, {'Dogg', 'Star'})
---
- wDo
- limit
...
s:error()
---
- 0
- Success
...
s:readline(3, {'Dogg', 'Star'})
---
- ggS
- limit
...
s:error()
---
- 0
- Success
...
s:readline(3)
---
- tar
- limit
...
s:error()
---
- 0
- Success
...
23
sl = {'Crown', 'King', 'Kong', 'Cezar'}
---
...
s:readline(sl, 1.0)
---
- KKong
- null
- Kong
...
s:error()
---
- 0
- Success
...
s:readline(sl, 1.0)
---
- King
- null
- King
...
s:error()
---
- 0
- Success
...
s:readline(sl, 1.0)
---
- CezaCezar
- null
- Cezar
...
s:error()
---
- 0
- Success
...
s:readline(sl, 1.0)
---
- Crown
- null
- Crown
...
s:error()
---
- 0
- Success
...
26
sl = {'Agatha', 'Road', 'Corn', 'Drive', 'Pop'}
---
...
s:readline(64, sl, 1.0)
---
- RoAgatha
- null
- Agatha
...
s:error()
---
- 0
- Success
...
s:readline(64, sl, 1.0)
---
- Pop
- null
- Pop
...
s:error()
---
- 0
- Success
...
s:readline(64, sl, 1.0)
---
- PoCorn
- null
- Corn
...
s:error()
---
- 0
- Success
...
s:readline(64, sl, 1.0)
---
- Drive
- null
- Drive
...
s:error()
---
- 0
- Success
...
21
s:readline({'Canada'}, 0.01)
---
- 
- timeout
- 110
- Connection timed out
...
s:error()
---
- 110
- Connection timed out
...
2
s:readline({'Canada'}, 0.01)
---
- RoadAfricaCubaRomaniaCanada
- null
- Canada
...
s:error()
---
- 0
- Success
...
6
s:readline({'Canada'}, 0.01)
---
- Canada
- null
- Canada
...
s:error()
---
- 0
- Success
...
19
s:readline({'msg'})
---
- msg
- null
- msg
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- ' msg'
- null
- msg
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- ' msg'
- null
- msg
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- ' msg'
- null
- msg
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- ' msg'
- null
- msg
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- 
- eof
...
s:error()
---
- 0
- Success
...
s:readline({'msg'})
---
- 
- eof
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('127.0.0.1', '30307'))
---
- userdata
...
s:error()
---
- 0
- Success
...
29
s:readline({'Z'})
---
- SomelongLongStringStrinString
- eof
...
s:error()
---
- 0
- Success
...
s:close()
---
...
type(s:connect('localhost', '30303'))
---
- userdata
...
s:send('ping')
---
- 4
...
connected
s:recv(4)
---
- ping
...
s:send('ping')
---
- 4
...
s:error()
---
- 0
- Success
...
s:send('ping')
---
- 0
- error
- 32
- Broken pipe
...
s:error()
---
- 32
- Broken pipe
...
s:close()
---
...
type(s:bind('127.0.0.1', '30303'))
---
- userdata
...
type(s:listen())
---
- userdata
...
client, status, addr = s:accept()
---
...
addr
---
- 127.0.0.1
...
data = client:recv(4)
---
...
data
---
- ping
...
client:send(data, 4)
---
- 4
...
client:close()
---
...
s:close()
---
...
ping
s = box.socket.udp()
---
...
type(s:sendto('ping', '127.0.0.1', '30302'))
---
- number
...
s:error()
---
- 0
- Success
...
ping
s:recv(4)
---
- 
- error
- 107
- Transport endpoint is not connected
...
s:close()
---
...
s = box.socket.udp()
---
...
type(s:bind('127.0.0.1', '30301'))
---
- userdata
...
s:error()
---
- 0
- Success
...
data, status, client, port = s:recvfrom(4)
---
...
s:error()
---
- 0
- Success
...
data
---
- ping
...
client
---
- 127.0.0.1
...
type(s:sendto(data, client, port))
---
- number
...
s:error()
---
- 0
- Success
...
ping
s:close()
---
...
 replies = 0 function bug1160869() 	local s = box.socket.tcp() 	s:connect('127.0.0.1', box.cfg.primary_port) 	box.fiber.resume( box.fiber.create(function() 		box.fiber.detach() 		while true do 			s:recv(12) 			replies = replies + 1 		end 	end) ) 	return s:send(box.pack('iii', 65280, 0, 1)) end 
---
...
bug1160869()
---
- 12
...
bug1160869()
---
- 12
...
bug1160869()
---
- 12
...
replies
---
- 3
...
 s = nil syncno = 0 reps = 0 function iostart() 	if s ~= nil then 		return 	end 	s = box.socket.tcp() 	s:connect('127.0.0.1', box.cfg.primary_port) 	box.fiber.resume( box.fiber.create(function() 		box.fiber.detach() 		while true do 			s:recv(12) 			reps = reps + 1 		end 	end)) end  function iotest() 	iostart() 	syncno = syncno + 1 	return s:send(box.pack('iii', 65280, 0, syncno)) end 
---
...
iotest()
---
- 12
...
iotest()
---
- 12
...
iotest()
---
- 12
...
reps
---
- 3
...
