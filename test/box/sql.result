net_box = require('net.box')
---
...
s = box.schema.space.create('test', { id = 0 })
---
...
_ = box.schema.space.create('test1', { id = 555 })
---
...
box.schema.user.create('test', { password = 'test' })
---
...
box.schema.user.grant('test', 'execute,read,write', 'universe')
---
...
conn = net_box:new('test:test@' .. box.cfg.listen)
---
...
space = conn.space.test
---
...
index = box.space.test:create_index('primary', { type = 'hash' })
---
...
_ = box.space.test1:create_index('primary', { type = 'hash' })
---
...
_ = box.space.test1:create_index('secondary', { type = 'hash', parts = {2, 'str'}})
---
...
conn:ping()
---
- true
...
-- xxx: bug  currently selects no rows
space:select{}
---
- []
...
space:insert{1, 'I am a tuple'}
---
- [1, 'I am a tuple']
...
space:select{1}
---
- - [1, 'I am a tuple']
...
-- currently there is no way to find out how many records
-- a space contains 
space:select{0}
---
- []
...
space:select{2}
---
- []
...
--# stop server default
--# start server default
net_box = require('net.box')
---
...
conn = net_box:new('test:test@' .. box.cfg.listen)
---
...
space = conn.space.test
---
...
space:select{1}
---
- - [1, 'I am a tuple']
...
box.snapshot()
---
- ok
...
space:select{1}
---
- - [1, 'I am a tuple']
...
--# stop server default
--# start server default
net_box = require('net.box')
---
...
conn = net_box:new('test:test@' .. box.cfg.listen)
---
...
space = conn.space.test
---
...
space:select{1}
---
- - [1, 'I am a tuple']
...
space:delete{1}
---
- [1, 'I am a tuple']
...
space:select{1}
---
- []
...
-- xxx: update comes through, returns 0 rows affected 
space:update(1, {{'=', 2, 'I am a new tuple'}})
---
...
-- nothing is selected, since nothing was there
space:select{1}
---
- []
...
space:insert{1, 'I am a new tuple'}
---
- [1, 'I am a new tuple']
...
space:select{1}
---
- - [1, 'I am a new tuple']
...
space:update(1, {{'=', 2, 'I am the newest tuple'}})
---
- [1, 'I am the newest tuple']
...
space:select{1}
---
- - [1, 'I am the newest tuple']
...
-- this is correct, can append field to tuple
space:update(1, {{'=', 2, 'Huh'}, {'=', 3, 'I am a new field! I was added via append'}})
---
- [1, 'Huh', 'I am a new field! I was added via append']
...
space:select{1}
---
- - [1, 'Huh', 'I am a new field! I was added via append']
...
-- this is illegal
space:update(1, {{'=', 2, 'Huh'}, {'=', 1001, 'invalid field'}})
---
- error: Field 1001 was not found in the tuple
...
space:select{1}
---
- - [1, 'Huh', 'I am a new field! I was added via append']
...
space:replace{1, 'I am a new tuple', 'stub'}
---
- [1, 'I am a new tuple', 'stub']
...
space:update(1, {{'=', 2, 'Huh'}, {'=', 3, 'Oh-ho-ho'}})
---
- [1, 'Huh', 'Oh-ho-ho']
...
space:select{1}
---
- - [1, 'Huh', 'Oh-ho-ho']
...
-- check empty strings
space:update(1, {{'=', 2, ''}, {'=', 3, ''}})
---
- [1, '', '']
...
space:select{1}
---
- - [1, '', '']
...
-- check type change 
space:update(1, {{'=', 2, 2}, {'=', 3, 3}})
---
- [1, 2, 3]
...
space:select{1}
---
- - [1, 2, 3]
...
-- check limits
space:insert{0}
---
- [0]
...
space:select{0}
---
- - [0]
...
space:select{4294967295}
---
- []
...
-- check update delete be secondary index
conn.space.test1:insert{0, "hello", 1}
---
- [0, 'hello', 1]
...
conn.space.test1.index.secondary:update("hello", {{'=', 3, 2}})
---
- [0, 'hello', 2]
...
conn.space.test1.index.secondary:delete("hello")
---
- [0, 'hello', 2]
...
-- cleanup 
space:delete(0)
---
- [0]
...
space:delete(4294967295)
---
...
box.space.test:drop()
---
...
box.space.test1:drop()
---
...
box.schema.user.drop('test')
---
...
space = nil
---
...
