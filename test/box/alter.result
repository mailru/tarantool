_space = box.space[box.schema.SPACE_ID]
---
...
_index = box.space[box.schema.INDEX_ID]
---
...
ADMIN = 1
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ', .lsn.: [0-9]+' to ''")
---
- true
...
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
--
-- Test insertion into a system space - verify that
-- mandatory fields are required.
--
_space:insert{_space.id, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
--
-- Bad space id
--
_space:insert{'hello', 'world', 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- error: 'Tuple field 1 type does not match one required by operation: expected unsigned'
...
--
-- Can't create a space which has wrong field count - field_count must be NUM
--
_space:insert{_space.id, ADMIN, 'test', 'world', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
--
-- There is already a tuple for the system space
--
_space:insert{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
_space:replace{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- [280, 1, '_space', 'memtx', 0, {}, []]
...
_space:insert{_index.id, ADMIN, '_index', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
_space:replace{_index.id, ADMIN, '_index', 'memtx', 0, EMPTY_MAP, {}}
---
- [288, 1, '_index', 'memtx', 0, {}, []]
...
--
-- Can't change properties of a space
--
_space:replace{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- [280, 1, '_space', 'memtx', 0, {}, []]
...
--
-- Can't drop a system space
--
_space:delete{_space.id}
---
- error: 'Can''t drop space ''_space'': the space has indexes'
...
_space:delete{_index.id}
---
- error: 'Can''t drop space ''_index'': the space has indexes'
...
--
-- Can't change properties of a space
--
_space:update({_space.id}, {{'-', 1, 1}})
---
- error: Attempt to modify a tuple field which is part of index 'primary' in space '_space'
...
_space:update({_space.id}, {{'-', 1, 2}})
---
- error: Attempt to modify a tuple field which is part of index 'primary' in space '_space'
...
--
-- Create a space
--
t = _space:auto_increment{ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
...
-- Check that a space exists
space = box.space[t[1]]
---
...
space.id
---
- 341
...
space.field_count
---
- 0
...
space.index[0]
---
- null
...
--
-- check dml - the space has no indexes yet, but must not crash on DML
--
space:select{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:insert{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:replace{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:update({0}, {{'+', 1, 1}})
---
- error: 'No index #0 is defined in space ''hello'''
...
space:delete{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
t = _space:delete{space.id}
---
...
space_deleted = box.space[t[1]]
---
...
space_deleted
---
- null
...
space:replace{0}
---
- error: Space '341' does not exist
...
_index:insert{_space.id, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- error: Duplicate key exists in unique index 'primary' in space '_index'
...
_index:replace{_space.id, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- [280, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
...
_index:insert{_index.id, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned'}
---
- error: Duplicate key exists in unique index 'primary' in space '_index'
...
_index:replace{_index.id, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned'}
---
- [288, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned']
...
-- access_sysview.test changes output of _index:select{}.
-- let's change _index space in such a way that it will be
-- uniformn weather access_sysview.test is completed of not.
box.space._space.index.owner:alter{parts = {2, 'unsigned'}}
---
...
box.space._vspace.index.owner:alter{parts = {2, 'unsigned'}}
---
...
_index:select{}
---
- - [272, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]
  - [276, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [276, 1, 'name', 'tree', {'unique': true}, [[1, 'string']]]
  - [280, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
  - [280, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [280, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [281, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [281, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [281, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [284, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [284, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [284, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [285, 0, 'primary', 'hash', {'unique': true}, [[0, 'unsigned']]]
  - [288, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned']
  - [288, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [289, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
  - [289, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [296, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [296, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [296, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [297, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [297, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [297, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [304, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [304, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [304, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [305, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [305, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [305, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [312, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'], [3, 'unsigned']]]
  - [312, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [312, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'unsigned']]]
  - [313, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'], [3, 'unsigned']]]
  - [313, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [313, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'unsigned']]]
  - [320, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [320, 1, 'uuid', 'tree', {'unique': true}, [[1, 'string']]]
  - [330, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 1, 'sequence', 'tree', {'unique': false}, [[1, 'unsigned']]]
...
-- modify indexes of a system space
_index:delete{_index.id, 0}
---
- error: Can't drop the primary key in a system space, space '_index'
...
_space:insert{1000, ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'hello', 'memtx', 0, {}, []]
...
_index:insert{1000, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- [1000, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
...
box.space[1000]:insert{0, 'hello, world'}
---
- [0, 'hello, world']
...
box.space[1000]:drop()
---
...
box.space[1000]
---
- null
...
-- test that after disabling triggers on system spaces we still can
-- get a correct snapshot
_index:run_triggers(false)
---
...
_space:run_triggers(false)
---
...
box.snapshot()
---
- ok
...
test_run:cmd("restart server default with cleanup=1")
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
ADMIN = 1
---
...
box.space['_space']:insert{1000, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000].id
---
- 1000
...
box.space['_space']:delete{1000}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000]
---
- null
...
--------------------------------------------------------------------------------
-- #197: box.space.space0:len() returns an error if there is no index
--------------------------------------------------------------------------------
space = box.schema.space.create('gh197')
---
...
space:len()
---
- 0
...
space:truncate()
---
...
space:pairs():totable()
---
- []
...
space:drop()
---
...
--------------------------------------------------------------------------------
-- #198: names like '' and 'x.y' and 5 and 'primary ' are legal
--
-- The result of this test is superseded by the change made
-- in scope of gh-2914, which allows all printable characters for
-- identifiers.
--
--------------------------------------------------------------------------------
-- invalid identifiers
s = box.schema.space.create('invalid.identifier')
---
...
s.name
---
- invalid.identifier
...
s:drop()
---
...
s = box.schema.space.create('invalid identifier')
---
...
s.name
---
- invalid identifier
...
s:drop()
---
...
s = box.schema.space.create('primary ')
---
...
'|'..s.name..'|'
---
- '|primary |'
...
s:drop()
---
...
s = box.schema.space.create('5')
---
...
s.name
---
- '5'
...
s:drop()
---
...
box.schema.space.create('')
---
- error: Invalid identifier '' (expected printable symbols only)
...
-- valid identifiers
box.schema.space.create('_Abcde'):drop()
---
...
box.schema.space.create('_5'):drop()
---
...
box.schema.space.create('valid_identifier'):drop()
---
...
-- some OS-es ship incomplete locales, breaking ID validation
weird_chars=''
---
...
if jit.os~='OSX' and jit.os~='BSD' then weird_chars='空間' end
---
...
box.schema.space.create('ынтыпрайзный_'..weird_chars):drop() -- unicode
---
...
box.schema.space.create('utf8_наше_Фсё'):drop() -- unicode
---
...
space = box.schema.space.create('test')
---
...
-- invalid identifiers
i = space:create_index('invalid.identifier')
---
...
i.name
---
- invalid.identifier
...
i:drop()
---
...
i = space:create_index('invalid identifier')
---
...
i.name
---
- invalid identifier
...
i:drop()
---
...
i = space:create_index('primary ')
---
...
'|'..i.name..'|'
---
- '|primary |'
...
i:drop()
---
...
i = space:create_index('5')
---
...
i.name
---
- '5'
...
i:drop()
---
...
space:create_index('')
---
- error: Invalid identifier '' (expected printable symbols only)
...
space:drop()
---
...
-- gh-57 Confusing error message when trying to create space with a
-- duplicate id
auto = box.schema.space.create('auto_original')
---
...
box.schema.space.create('auto', {id = auto.id})
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
box.schema.space.drop('auto')
---
- error: Illegal parameters, space_id should be a number
...
box.schema.space.create('auto_original', {id = auto.id})
---
- error: Space 'auto_original' already exists
...
auto:drop()
---
...
-- ------------------------------------------------------------------
-- gh-281 Crash after rename + replace + delete with multi-part index
-- ------------------------------------------------------------------
s = box.schema.space.create('space')
---
...
index = s:create_index('primary', {unique = true, parts = {1, 'unsigned', 2, 'string'}})
---
...
s:insert{1, 'a'}
---
- [1, 'a']
...
box.space.space.index.primary:rename('secondary')
---
...
box.space.space:replace{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:delete{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:select{}
---
- - [1, 'a']
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-362 Appropriate error messages in create_index
-- ------------------------------------------------------------------
s = box.schema.space.create(42)
---
- error: Illegal parameters, name should be a string
...
s = box.schema.space.create("test", "bug")
---
- error: Illegal parameters, options should be a table
...
s = box.schema.space.create("test", {unknown = 'param'})
---
- error: Illegal parameters, unexpected option 'unknown'
...
s = box.schema.space.create("test")
---
...
index = s:create_index('primary', {unique = true, parts = {0, 'unsigned', 1, 'string'}})
---
- error: 'Illegal parameters, invalid index parts: field_no must be one-based'
...
index = s:create_index('primary', {unique = true, parts = {'unsigned', 1, 'string', 2}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''unsigned'''
...
index = s:create_index('primary', {unique = true, parts = 'bug'})
---
- error: Illegal parameters, options parameter 'parts' should be of type table
...
index = s:create_index('test', {unique = true, parts = {1, 'unsigned'}, mmap = true})
---
- error: Illegal parameters, unexpected option 'mmap'
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-155 Tarantool failure on simultaneous space:drop()
-- ------------------------------------------------------------------
test_run:cmd("setopt delimiter ';'")
---
- true
...
local fiber = require('fiber')
local W = 4
local N = 50
local ch = fiber.channel(W)
for i=1,W do
    fiber.create(function()
        for k=1,N do
            local space_id = math.random(2147483647)
            local space = box.schema.space.create(string.format('space_%d', space_id))
            space:create_index('pk', { type = 'tree' })
            space:drop()
        end
        ch:put(true)
    end)
end
for i=1,W do
    ch:get()
end
test_run:cmd("setopt delimiter ''");
---
...
-- ------------------------------------------------------------------
-- Lower and upper cases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'nUmBeR', 2, 'StRinG'}})
---
...
space.index.primary.parts[1].type == 'number'
---
- true
...
space.index.primary.parts[2].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'number'], [1, 'string']]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Aliases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'uint', 2, 'int', 3, 'str'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
space.index.primary.parts[2].type == 'integer'
---
- true
...
space.index.primary.parts[3].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'unsigned'], [1, 'integer'], [2, 'string']]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Tarantool 1.6 compatibility
-- ------------------------------------------------------------------
-- gh-1534: deprecate 'num' data type for unsigned integers
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'num'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'unsigned']]
...
space:drop()
---
...
-- data dictionary compatibility is checked by upgrade.test.lua
test_run:cmd("clear filter")
---
- true
...
--
-- create_index() does not modify index options
--
s = box.schema.space.create('test', {engine='vinyl'})
---
...
opts = {parts={1, 'unsigned'}}
---
...
_ = s:create_index('pk', opts)
---
...
opts
---
- parts:
  - 1
  - unsigned
...
s:drop()
---
...
--
-- gh-2074: alter a primary key
--
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, 2}
---
- [2, 2]
...
s:insert{3, 3}
---
- [3, 3]
...
s.index.pk:alter({parts={1, 'num', 2, 'num'}})
---
...
s.index.pk
---
- unique: true
  parts:
  - type: unsigned
    is_nullable: false
    fieldno: 1
  - type: unsigned
    is_nullable: false
    fieldno: 2
  id: 0
  space_id: 731
  name: pk
  type: TREE
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
_ = s:create_index('secondary', {parts={2, 'num'}})
---
...
s.index.pk:alter({parts={1, 'num'}})
---
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s.index.pk
---
- unique: true
  parts:
  - type: unsigned
    is_nullable: false
    fieldno: 1
  id: 0
  space_id: 731
  name: pk
  type: TREE
...
s.index.secondary
---
- unique: true
  parts:
  - type: unsigned
    is_nullable: false
    fieldno: 2
  id: 1
  space_id: 731
  name: secondary
  type: TREE
...
s.index.secondary:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s:drop()
---
...
--
-- Forbid explicit space id 0.
--
s = box.schema.create_space('test', { id = 0 })
---
- error: 'Failed to create space ''test'': space id 0 is reserved'
...
--
-- gh-2660 space:truncate() does not preserve table triggers
--
ts = box.schema.space.create('test')
---
...
ti = ts:create_index('primary')
---
...
ts:insert{1, 'b', 'c'}
---
- [1, 'b', 'c']
...
ts:insert{2, 'b', 'c'}
---
- [2, 'b', 'c']
...
o = nil
---
...
n = nil
---
...
function save_out(told, tnew) o = told n = tnew end
---
...
_ = ts:on_replace(save_out)
---
...
ts:replace{2, 'a', 'b', 'c'}
---
- [2, 'a', 'b', 'c']
...
o
---
- [2, 'b', 'c']
...
n
---
- [2, 'a', 'b', 'c']
...
ts:truncate()
---
...
ts:replace{2, 'a', 'b'}
---
- [2, 'a', 'b']
...
o
---
- null
...
n
---
- [2, 'a', 'b']
...
ts:replace{3, 'a', 'b'}
---
- [3, 'a', 'b']
...
o
---
- null
...
n
---
- [3, 'a', 'b']
...
ts:drop()
---
...
--
-- gh-2652: validate space format.
--
s = box.schema.space.create('test', { format = "format" })
---
- error: Illegal parameters, options parameter 'format' should be of type table
...
format = { { name = 100 } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Illegal parameters, format[1]: name (string) is expected'
...
long = string.rep('a', box.schema.NAME_MAX + 1)
---
...
format = { { name = long } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 name is too long'
...
format = { { name = 'id', type = '100' } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 has unknown field type'
...
format = { utils.setmap({}) }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Illegal parameters, format[1]: name (string) is expected'
...
-- Ensure the format is updated after index drop.
format = { { name = 'id', type = 'unsigned' } }
---
...
s = box.schema.space.create('test', { format = format })
---
...
pk = s:create_index('pk')
---
...
sk = s:create_index('sk', { parts = { 2, 'string' } })
---
...
s:replace{1, 1}
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
sk:drop()
---
...
s:replace{1, 1}
---
- [1, 1]
...
s:drop()
---
...
-- Check index parts conflicting with space format.
format = { { name='field1', type='unsigned' }, { name='field2', type='string' }, { name='field3', type='scalar' } }
---
...
s = box.schema.space.create('test', { format = format })
---
...
pk = s:create_index('pk')
---
...
sk1 = s:create_index('sk1', { parts = { 2, 'unsigned' } })
---
- error: Field 'field2' has type 'string' in space format, but type 'unsigned' in index definition
...
-- Check space format conflicting with index parts.
sk3 = s:create_index('sk3', { parts = { 2, 'string' } })
---
...
format[2].type = 'unsigned'
---
...
s:format(format)
---
- error: Field 'field2' has type 'unsigned' in space format, but type 'string' in index definition
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'string'}, {'name': 'field3', 'type': 'scalar'}]
...
s.index.sk3.parts
---
- - type: string
    is_nullable: false
    fieldno: 2
...
-- Space format can be updated, if conflicted index is deleted.
sk3:drop()
---
...
s:format(format)
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'unsigned'}, {'name': 'field3', 'type': 'scalar'}]
...
-- Check deprecated field types.
format[2].type = 'num'
---
...
format[3].type = 'str'
---
...
format[4] = { name = 'field4', type = '*' }
---
...
format
---
- - name: field1
    type: unsigned
  - name: field2
    type: num
  - name: field3
    type: str
  - name: field4
    type: '*'
...
s:format(format)
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'num'}, {'name': 'field3', 'type': 'str'}, {'name': 'field4', 'type': '*'}]
...
s:replace{1, 2, '3', {4, 4, 4}}
---
- [1, 2, '3', [4, 4, 4]]
...
-- Check not indexed fields checking.
s:truncate()
---
...
format[2] = {name='field2', type='string'}
---
...
format[3] = {name='field3', type='array'}
---
...
format[4] = {name='field4', type='number'}
---
...
format[5] = {name='field5', type='integer'}
---
...
format[6] = {name='field6', type='scalar'}
---
...
format[7] = {name='field7', type='map'}
---
...
format[8] = {name='field8', type='any'}
---
...
format[9] = {name='field9'}
---
...
s:format(format)
---
...
-- Check incorrect field types.
format[9] = {name='err', type='any'}
---
...
s:format(format)
---
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}, 8, 9}
---
- [1, '2', [3, 3], 4.4, -5, true, {'value': 7}, 8, 9]
...
s:replace{1, 2, {3, 3}, 4.4, -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
s:replace{1, '2', 3, 4.4, -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 3 type does not match one required by operation: expected array'
...
s:replace{1, '2', {3, 3}, '4', -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 4 type does not match one required by operation: expected number'
...
s:replace{1, '2', {3, 3}, 4.4, -5.5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 5 type does not match one required by operation: expected integer'
...
s:replace{1, '2', {3, 3}, 4.4, -5, {6, 6}, {value=7}, 8, 9}
---
- error: 'Tuple field 6 type does not match one required by operation: expected scalar'
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {7}, 8, 9}
---
- error: 'Tuple field 7 type does not match one required by operation: expected map'
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}}
---
- error: Tuple field count 7 is less than required by space format or defined indexes (expected at least 9)
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}, 8}
---
- error: Tuple field count 8 is less than required by space format or defined indexes (expected at least 9)
...
s:truncate()
---
...
--
-- gh-1014: field names.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2'}
---
...
format[3] = {name = 'field1'}
---
...
s:format(format)
---
- error: Space field 'field1' is duplicate
...
s:drop()
---
...
-- https://github.com/tarantool/tarantool/issues/2815
-- Extend space format definition syntax
format = {{name='key',type='unsigned'}, {name='value',type='string'}}
---
...
s = box.schema.space.create('test', { format = format })
---
...
s:format()
---
- [{'name': 'key', 'type': 'unsigned'}, {'name': 'value', 'type': 'string'}]
...
s:format({'id', 'name'})
---
...
s:format()
---
- [{'name': 'id', 'type': 'any'}, {'name': 'name', 'type': 'any'}]
...
s:format({'id', {'name1'}})
---
...
s:format()
---
- [{'name': 'id', 'type': 'any'}, {'name': 'name1', 'type': 'any'}]
...
s:format({'id', {'name2', 'string'}})
---
...
s:format()
---
- [{'name': 'id', 'type': 'any'}, {'name': 'name2', 'type': 'string'}]
...
s:format({'id', {'name', type = 'string'}})
---
...
s:format()
---
- [{'name': 'id', 'type': 'any'}, {'name': 'name', 'type': 'string'}]
...
s:drop()
---
...
format = {'key', {'value',type='string'}}
---
...
s = box.schema.space.create('test', { format = format })
---
...
s:format()
---
- [{'name': 'key', 'type': 'any'}, {'name': 'value', 'type': 'string'}]
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
s:create_index('test', {parts = {'test'}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test', {parts = {{'test'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test', {parts = {{field = 'test'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test', {parts = {1}}).parts
---
- - type: scalar
    is_nullable: false
    fieldno: 1
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
s:format{{'test1', 'integer'}, 'test2', {'test3', 'integer'}, {'test4','scalar'}}
---
...
s:create_index('test', {parts = {'test'}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test', {parts = {{'test'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test', {parts = {{field = 'test'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''test'''
...
s:create_index('test1', {parts = {'test1'}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 1
...
s:create_index('test2', {parts = {'test2'}}).parts
---
- error: 'Can''t create or modify index ''test2'' in space ''test'': field type ''any'' is not supported'
...
s:create_index('test3', {parts = {{'test1', 'integer'}}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 1
...
s:create_index('test4', {parts = {{'test2', 'integer'}}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 2
...
s:create_index('test5', {parts = {{'test2', 'integer'}}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 2
...
s:create_index('test6', {parts = {1, 3}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 1
  - type: integer
    is_nullable: false
    fieldno: 3
...
s:create_index('test7', {parts = {'test1', 4}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 1
  - type: scalar
    is_nullable: false
    fieldno: 4
...
s:create_index('test8', {parts = {{1, 'integer'}, {'test4', 'scalar'}}}).parts
---
- - type: integer
    is_nullable: false
    fieldno: 1
  - type: scalar
    is_nullable: false
    fieldno: 4
...
s:drop()
---
...
--
-- gh-2800: space formats checking is broken.
--
-- Ensure that vinyl correctly process field count change.
s = box.schema.space.create('test', {engine = 'vinyl', field_count = 2})
---
...
pk = s:create_index('pk')
---
...
s:replace{1, 2}
---
- [1, 2]
...
t = box.space._space:select{s.id}[1]:totable()
---
...
t[5] = 1
---
...
box.space._space:replace(t)
---
- error: 'Can''t modify space ''test'': can not change field count on a non-empty space'
...
s:drop()
---
...
-- Check field type changes.
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2', type = 'any'}
---
...
format[3] = {name = 'field3', type = 'unsigned'}
---
...
format[4] = {name = 'field4', type = 'string'}
---
...
format[5] = {name = 'field5', type = 'number'}
---
...
format[6] = {name = 'field6', type = 'integer'}
---
...
format[7] = {name = 'field7', type = 'boolean'}
---
...
format[8] = {name = 'field8', type = 'scalar'}
---
...
format[9] = {name = 'field9', type = 'array'}
---
...
format[10] = {name = 'field10', type = 'map'}
---
...
s = box.schema.space.create('test', {format = format})
---
...
pk = s:create_index('pk')
---
...
t = s:replace{1, {2}, 3, '4', 5.5, -6, true, -8, {9, 9}, {val = 10}}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function fail_format_change(fieldno, new_type)
    local old_type = format[fieldno].type
    format[fieldno].type = new_type
    local ok, msg = pcall(s.format, s, format)
    format[fieldno].type = old_type
    return msg
end;
---
...
function ok_format_change(fieldno, new_type)
    local old_type = format[fieldno].type
    format[fieldno].type = new_type
    s:format(format)
    s:delete{1}
    format[fieldno].type = old_type
    s:format(format)
    s:replace(t)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- any --X--> unsigned
fail_format_change(2, 'unsigned')
---
- 'Tuple field 2 type does not match one required by operation: expected unsigned'
...
-- unsigned -----> any
ok_format_change(3, 'any')
---
...
-- unsigned --X--> string
fail_format_change(3, 'string')
---
- 'Can''t modify space ''test'': Can not change a field type from unsigned to string on a not empty space'
...
-- unsigned -----> number
ok_format_change(3, 'number')
---
...
-- unsigned -----> integer
ok_format_change(3, 'integer')
---
...
-- unsigned -----> scalar
ok_format_change(3, 'scalar')
---
...
-- unsigned --X--> map
fail_format_change(3, 'map')
---
- 'Can''t modify space ''test'': Can not change a field type from unsigned to map on a not empty space'
...
-- string -----> any
ok_format_change(4, 'any')
---
...
-- string -----> scalar
ok_format_change(4, 'scalar')
---
...
-- string --X--> boolean
fail_format_change(4, 'boolean')
---
- 'Can''t modify space ''test'': Can not change a field type from string to boolean on a not empty space'
...
-- number -----> any
ok_format_change(5, 'any')
---
...
-- number -----> scalar
ok_format_change(5, 'scalar')
---
...
-- number --X--> integer
fail_format_change(5, 'integer')
---
- 'Tuple field 5 type does not match one required by operation: expected integer'
...
-- integer -----> any
ok_format_change(6, 'any')
---
...
-- integer -----> number
ok_format_change(6, 'number')
---
...
-- integer -----> scalar
ok_format_change(6, 'scalar')
---
...
-- integer --X--> unsigned
fail_format_change(6, 'unsigned')
---
- 'Tuple field 6 type does not match one required by operation: expected unsigned'
...
-- boolean -----> any
ok_format_change(7, 'any')
---
...
-- boolean -----> scalar
ok_format_change(7, 'scalar')
---
...
-- boolean --X--> string
fail_format_change(7, 'string')
---
- 'Can''t modify space ''test'': Can not change a field type from boolean to string on a not empty space'
...
-- scalar -----> any
ok_format_change(8, 'any')
---
...
-- scalar --X--> unsigned
fail_format_change(8, 'unsigned')
---
- 'Tuple field 8 type does not match one required by operation: expected unsigned'
...
-- array -----> any
ok_format_change(9, 'any')
---
...
-- array --X--> scalar
fail_format_change(9, 'scalar')
---
- 'Can''t modify space ''test'': Can not change a field type from array to scalar on a not empty space'
...
-- map -----> any
ok_format_change(10, 'any')
---
...
-- map --X--> scalar
fail_format_change(10, 'scalar')
---
- 'Can''t modify space ''test'': Can not change a field type from map to scalar on a not empty space'
...
s:drop()
---
...
-- Check new fields adding.
format = {}
---
...
s = box.schema.space.create('test')
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
s:format(format) -- Ok, no indexes.
---
...
pk = s:create_index('pk')
---
...
format[2] = {name = 'field2', type = 'unsigned'}
---
...
s:format(format) -- Ok, empty space.
---
...
s:replace{1, 1}
---
- [1, 1]
...
format[2] = nil
---
...
s:format(format) -- Ok, can delete fields with no checks.
---
...
s:delete{1}
---
- [1, 1]
...
sk1 = s:create_index('sk1', {parts = {2, 'unsigned'}})
---
...
sk2 = s:create_index('sk2', {parts = {3, 'unsigned'}})
---
...
sk5 = s:create_index('sk5', {parts = {5, 'unsigned'}})
---
...
s:replace{1, 1, 1, 1, 1}
---
- [1, 1, 1, 1, 1]
...
format[2] = {name = 'field2', type = 'unsigned'}
---
...
format[3] = {name = 'field3', type = 'unsigned'}
---
...
format[4] = {name = 'field4', type = 'any'}
---
...
format[5] = {name = 'field5', type = 'unsigned'}
---
...
-- Ok, all new fields are indexed or have type ANY, and new
-- field_count <= old field_count.
s:format(format)
---
...
s:replace{1, 1, 1, 1, 1, 1}
---
- [1, 1, 1, 1, 1, 1]
...
format[6] = {name = 'field6', type = 'unsigned'}
---
...
-- Ok, but check existing tuples for a new field[6].
s:format(format)
---
...
-- Fail, not enough fields.
s:replace{2, 2, 2, 2, 2}
---
- error: Tuple field count 5 is less than required by space format or defined indexes (expected at least 6)
...
s:replace{2, 2, 2, 2, 2, 2, 2}
---
- [2, 2, 2, 2, 2, 2, 2]
...
format[7] = {name = 'field7', type = 'unsigned'}
---
...
-- Fail, the tuple {1, ... 1} is invalid for a new format.
s:format(format)
---
- error: Tuple field count 6 is less than required by space format or defined indexes (expected at least 7)
...
s:drop()
---
...
-- Vinyl does not support adding fields to a not empty space.
s = box.schema.space.create('test', {engine = 'vinyl'})
---
...
pk = s:create_index('pk')
---
...
s:replace{1,1}
---
- [1, 1]
...
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2', type = 'unsigned'}
---
...
s:format(format)
---
- error: Vinyl does not support changing space format of a non-empty space
...
s:drop()
---
...
--
-- gh-1557: NULL in indexes.
--
NULL = require('msgpack').NULL
---
...
format = {}
---
...
format[1] = { name = 'field1', type = 'unsigned', is_nullable = true }
---
...
format[2] = { name = 'field2', type = 'unsigned', is_nullable = true }
---
...
s = box.schema.space.create('test', { format = format })
---
...
s:create_index('primary', { parts = { 'field1' } })
---
- error: Primary index of the space 'test' can not contain nullable parts
...
s:create_index('primary', { parts = {{'field1', is_nullable = false}} })
---
- error: Field 1 is nullable in space format, but not nullable in index parts
...
format[1].is_nullable = false
---
...
s:format(format)
---
...
s:create_index('primary', { parts = {{'field1', is_nullable = true}} })
---
- error: Primary index of the space 'test' can not contain nullable parts
...
s:create_index('primary', { parts = {'field1'} })
---
- unique: true
  parts:
  - type: unsigned
    is_nullable: false
    fieldno: 1
  id: 0
  space_id: 747
  name: primary
  type: TREE
...
-- Check that is_nullable can't be set to false on non-empty space
s:insert({1, NULL})
---
- [1, null]
...
format[1].is_nullable = true
---
...
s:format(format)
---
- error: Field 1 is nullable in space format, but not nullable in index parts
...
format[1].is_nullable = false
---
...
format[2].is_nullable = false
---
...
s:format(format)
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned'
...
s:delete(1)
---
- [1, null]
...
-- Disable is_nullable on empty space
s:format(format)
---
...
-- Disable is_nullable on a non-empty space.
format[2].is_nullable = true
---
...
s:format(format)
---
...
s:replace{1, 1}
---
- [1, 1]
...
format[2].is_nullable = false
---
...
s:format(format)
---
...
-- Enable is_nullable on a non-empty space.
format[2].is_nullable = true
---
...
s:format(format)
---
...
s:replace{1, box.NULL}
---
- [1, null]
...
s:delete{1}
---
- [1, null]
...
s:format({})
---
...
s:create_index('secondary', { parts = {{2, 'string', is_nullable = true}} })
---
- unique: true
  parts:
  - type: string
    is_nullable: true
    fieldno: 2
  id: 1
  space_id: 747
  name: secondary
  type: TREE
...
s:insert({1, NULL})
---
- [1, null]
...
s.index.secondary:alter({ parts = {{2, 'string', is_nullable = false} }})
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
s:delete({1})
---
- [1, null]
...
s.index.secondary:alter({ parts = {{2, 'string', is_nullable = false} }})
---
...
s:insert({1, NULL})
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
s:insert({2, 'xxx'})
---
- [2, 'xxx']
...
s.index.secondary:alter({ parts = {{2, 'string', is_nullable = true} }})
---
...
s:insert({1, NULL})
---
- [1, null]
...
s:drop()
---
...
s = box.schema.create_space('test')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
s:format({
    [1] = { name = 'id1', type = 'unsigned'},
    [2] = { name = 'id2', type = 'unsigned'},
    [3] = { name = 'id3', type = 'string'},
    [4] = { name = 'id4', type = 'string'},
    [5] = { name = 'id5', type = 'string'},
    [6] = { name = 'id6', type = 'string'},
});
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
s:format()
---
- [{'name': 'id1', 'type': 'unsigned'}, {'name': 'id2', 'type': 'unsigned'}, {'name': 'id3', 'type': 'string'}, {'name': 'id4', 'type': 'string'}, {'name': 'id5', 'type': 'string'}, {'name': 'id6', 'type': 'string'}]
...
_ = s:create_index('primary')
---
...
s:insert({1, 1, 'a', 'b', 'c', 'd'})
---
- [1, 1, 'a', 'b', 'c', 'd']
...
s:drop()
---
...
s = box.schema.create_space('test')
---
...
idx = s:create_index('idx')
---
...
box.space.test == s
---
- true
...
s:drop()
---
...
--
-- gh-3000: index modifying must change key_def parts and
-- comparators. They can be changed, if there was compatible index
-- parts change. For example, a part type was changed from
-- unsigned to number. In such a case comparators must be reset
-- and part types updated.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
s:replace{1}
---
- [1]
...
pk:alter{parts = {{1, 'integer'}}}
---
...
s:replace{-2}
---
- [-2]
...
s:select{}
---
- - [-2]
  - [1]
...
s:drop()
---
...
--
-- Allow to restrict space format, if corresponding restrictions
-- already are defined in indexes.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
function check_format_restriction(engine, name)
    local s = box.schema.create_space(name, {engine = engine})
    local pk = s:create_index('pk')
    local format = {}
    format[1] = {name = 'field1'}
    s:replace{1}
    s:replace{100}
    s:replace{0}
    s:format(format)
    s:format()
    format[1].type = 'unsigned'
    s:format(format)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
check_format_restriction('memtx', 'test1')
---
...
check_format_restriction('vinyl', 'test2')
---
...
box.space.test1:format()
---
- [{'name': 'field1', 'type': 'unsigned'}]
...
box.space.test1:select{}
---
- - [0]
  - [1]
  - [100]
...
box.space.test2:format()
---
- [{'name': 'field1', 'type': 'unsigned'}]
...
box.space.test2:select{}
---
- - [0]
  - [1]
  - [100]
...
box.space.test1:drop()
---
...
box.space.test2:drop()
---
...
--
-- Allow to change is_nullable in index definition on non-empty
-- space.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
sk1 = s:create_index('sk1', {parts = {{2, 'unsigned', is_nullable = true}}})
---
...
sk2 = s:create_index('sk2', {parts = {{3, 'unsigned', is_nullable = false}}})
---
...
s:replace{1, box.NULL, 1}
---
- [1, null, 1]
...
sk1:alter({parts = {{2, 'unsigned', is_nullable = false}}})
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned'
...
s:replace{1, 1, 1}
---
- [1, 1, 1]
...
sk1:alter({parts = {{2, 'unsigned', is_nullable = false}}})
---
...
s:replace{1, 1, box.NULL}
---
- error: 'Tuple field 3 type does not match one required by operation: expected unsigned'
...
sk2:alter({parts = {{3, 'unsigned', is_nullable = true}}})
---
...
s:replace{1, 1, box.NULL}
---
- [1, 1, null]
...
s:replace{2, 10, 100}
---
- [2, 10, 100]
...
s:replace{3, 0, 20}
---
- [3, 0, 20]
...
s:replace{4, 15, 150}
---
- [4, 15, 150]
...
s:replace{5, 9, box.NULL}
---
- [5, 9, null]
...
sk1:select{}
---
- - [3, 0, 20]
  - [1, 1, null]
  - [5, 9, null]
  - [2, 10, 100]
  - [4, 15, 150]
...
sk2:select{}
---
- - [1, 1, null]
  - [5, 9, null]
  - [3, 0, 20]
  - [2, 10, 100]
  - [4, 15, 150]
...
s:drop()
---
...
--
-- gh-3008: allow multiple types on the same field.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2', type = 'scalar'}
---
...
format[3] = {name = 'field3', type = 'integer'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
pk = s:create_index('pk')
---
...
sk1 = s:create_index('sk1', {parts = {{2, 'number'}}})
---
...
sk2 = s:create_index('sk2', {parts = {{2, 'integer'}}})
---
...
sk3 = s:create_index('sk3', {parts = {{2, 'unsigned'}}})
---
...
sk4 = s:create_index('sk4', {parts = {{3, 'number'}}})
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'scalar'}, {'name': 'field3', 'type': 'integer'}]
...
s:replace{1, '100', -20.2}
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned'
...
s:replace{1, 100, -20.2}
---
- error: 'Tuple field 3 type does not match one required by operation: expected integer'
...
s:replace{1, 100, -20}
---
- [1, 100, -20]
...
s:replace{2, 50, 0}
---
- [2, 50, 0]
...
s:replace{3, 150, -60}
---
- [3, 150, -60]
...
s:replace{4, 0, 120}
---
- [4, 0, 120]
...
pk:select{}
---
- - [1, 100, -20]
  - [2, 50, 0]
  - [3, 150, -60]
  - [4, 0, 120]
...
sk1:select{}
---
- - [4, 0, 120]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk2:select{}
---
- - [4, 0, 120]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk3:select{}
---
- - [4, 0, 120]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk4:select{}
---
- - [3, 150, -60]
  - [1, 100, -20]
  - [2, 50, 0]
  - [4, 0, 120]
...
sk1:alter{parts = {{2, 'unsigned'}}}
---
...
sk2:alter{parts = {{2, 'unsigned'}}}
---
...
sk4:alter{parts = {{3, 'integer'}}}
---
...
s:replace{1, 50.5, 1.5}
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned'
...
s:replace{1, 50, 1.5}
---
- error: 'Tuple field 3 type does not match one required by operation: expected integer'
...
s:replace{5, 5, 5}
---
- [5, 5, 5]
...
sk1:select{}
---
- - [4, 0, 120]
  - [5, 5, 5]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk2:select{}
---
- - [4, 0, 120]
  - [5, 5, 5]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk3:select{}
---
- - [4, 0, 120]
  - [5, 5, 5]
  - [2, 50, 0]
  - [1, 100, -20]
  - [3, 150, -60]
...
sk4:select{}
---
- - [3, 150, -60]
  - [1, 100, -20]
  - [2, 50, 0]
  - [5, 5, 5]
  - [4, 0, 120]
...
sk1:drop()
---
...
sk2:drop()
---
...
sk3:drop()
---
...
-- Remove 'unsigned' constraints from indexes, and 'scalar' now
-- can be inserted in the second field.
s:replace{1, true, 100}
---
- [1, true, 100]
...
s:select{}
---
- - [1, true, 100]
  - [2, 50, 0]
  - [3, 150, -60]
  - [4, 0, 120]
  - [5, 5, 5]
...
sk4:select{}
---
- - [3, 150, -60]
  - [2, 50, 0]
  - [5, 5, 5]
  - [1, true, 100]
  - [4, 0, 120]
...
s:drop()
---
...
--
-- gh-2914: Allow any space name which consists of printable characters
--
identifier = require("identifier")
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
identifier.run_test(
	function (identifier)
		box.schema.space.create(identifier)
		if box.space[identifier] == nil then
			error("Cannot query space")
		end
	end,
	function (identifier) box.space[identifier]:drop() end
);
---
- All tests passed
...
s = box.schema.create_space("test");
---
...
identifier.run_test(
    function (identifier) s:create_index(identifier, {parts={1}}) end,
    function (identifier) s.index[identifier]:drop() end
);
---
- All tests passed
...
s:drop();
---
...
--
-- gh-2914: check column name validation.
-- Ensure that col names are validated as identifiers.
--
s = box.schema.create_space('test');
---
...
i = s:create_index("primary", {parts={1, "integer"}});
---
...
identifier.run_test(
	function (identifier)
		s:format({{name=identifier,type="integer"}})
		local t = s:replace({1})
		if t[identifier] ~= 1 then
			error("format identifier error")
		end
	end,
	function (identifier) end
);
---
- All tests passed
...
s:drop();
---
...
-- gh-2914: check coll name validation.
identifier.run_test(
    function (identifier) box.internal.collation.create(identifier, 'ICU', 'ru-RU', {}) end,
    function (identifier) box.internal.collation.drop(identifier) end
);
---
- All tests passed
...
test_run:cmd("setopt delimiter ''");
---
- true
...
--
-- gh-3011: add new names to old tuple formats.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
t1 = s:replace{1}
---
...
t1.field1
---
- null
...
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
s:format(format)
---
...
t2 = s:replace{2}
---
...
t2.field1
---
- 2
...
t1.field1
---
- 1
...
format[1].name = 'field_1'
---
...
s:format(format)
---
...
t3 = s:replace{3}
---
...
t1.field1
---
- null
...
t1.field_1
---
- 1
...
t2.field1
---
- null
...
t2.field_1
---
- 2
...
t3.field1
---
- null
...
t3.field_1
---
- 3
...
s:drop()
---
...
--
-- gh-3008. Ensure the change of hash index parts updates hash
-- key_def.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk', {type = 'hash'})
---
...
pk:alter{parts = {{1, 'string'}}}
---
...
s:replace{'1', '1'}
---
- ['1', '1']
...
s:replace{'1', '2'}
---
- ['1', '2']
...
pk:select{}
---
- - ['1', '2']
...
pk:select{'1'}
---
- - ['1', '2']
...
s:drop()
---
...
--
-- Ensure that incompatible key parts change validates format.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
s:replace{1}
---
- [1]
...
pk:alter{parts = {{1, 'string'}}} -- Must fail.
---
- error: 'Tuple field 1 type does not match one required by operation: expected string'
...
s:drop()
---
...
--
-- gh-2895: do not ignore field type in space format, if it is not
-- specified via 'type = ...'.
--
format = {}
---
...
format[1] = {name = 'field1', 'unsigned'}
---
...
format[2] = {name = 'field2', 'unsigned'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
s:format()
---
- [{'type': 'unsigned', 'name': 'field1'}, {'type': 'unsigned', 'name': 'field2'}]
...
format[2] = {name = 'field2', 'unsigned', 'unknown'}
---
...
s:format(format)
---
- error: 'Can''t modify space ''test'': field 2 format is not map with string keys'
...
s:format()
---
- [{'type': 'unsigned', 'name': 'field1'}, {'type': 'unsigned', 'name': 'field2'}]
...
s:drop()
---
...
